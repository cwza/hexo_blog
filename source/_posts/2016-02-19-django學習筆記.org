#+TITLE: django學習筆記
#+DATE: <2016-02-19 Fri 16:15>   
#+TAGS: python, django
#+LAYOUT: post
#+CATEGORIES: python
#+OPTIONS: toc:t \n:t

django學習筆記
隨筆亂記，陸續增加中
#+BEGIN_HTML
<!--more-->
#+END_HTML

* Layout Django Project
直接參考github上大大寫好的layout工具吧
https://github.com/pydanny/cookiecutter-django

* Setting Files
** 如何處理多環境設定(production, staging, local)
將setting files分開成各個環境，所有setting file全部進入git控管
底下為例子，在<repository root>/config/settings
#+begin_src sh
settings/
      __init__.py
      base.py
      dev_audreyr.py
      dev_pydanny.py
      local.py
      staging.py
      test.py
      production.py
#+end_src

local設定繼承自base
#+begin_src python
# settings/local.py 
from .base import *
DEBUG = True

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": "twoscoops",
        "USER": "",
        "PASSWORD": "",
        "HOST": 
        "localhost",
        "PORT": "",
        } 
}

INSTALLED_APPS += ("debug_toolbar", )
#+end_src

個人設定，繼承自local
#+begin_src python
# settings/dev_pydanny.py 
from .local import *
# Set short cache timeout
CACHE_TIMEOUT = 30
#+end_src

執行時用以下方式指定setting file執行
#+begin_src sh
django-admin shell --settings=twoscoops.settings.local
django-admin runserver --settings=twoscoops.settings.local
#+end_src
在server上可以設定環境變數DJANGO SETTINGS MODULE and PYTHONPATH來指定setting file，或利用virtualenv來設定(add Export to the end of virtualenv's bin/activate)
** 重要的secret key問題(secret key不該進入version control)
secret key不該進入version control所以不要把它放在setting file中
最好是放在environment variable，setting file中用os.environ["SOME_SECRET_KEY"]去拿

linux下將以下放到.bashrc, .bash_profile, or .profile
或利用virtualenv來設定(add Export to the end of virtualenv's bin/activate)
#+begin_src sh
export SOME_SECRET_KEY=1c3-cr3am-15-yummy
#+end_src

setting file用以下方式拿secret key
#+begin_src python
# Top of settings/production.py
import os
SOME_SECRET_KEY = os.environ["SOME_SECRET_KEY"]
#+end_src

上述方式在拿不到environ variable時錯誤訊息會是key_error，不甚好，可在base.py中加入以下改良
#+begin_src python
# settings/base.py 
import os
# Normally you should not import ANYTHING from Django directly
# into your settings, but ImproperlyConfigured is an exception.
from django.core.exceptions import ImproperlyConfigured .
def get_env_variable(var_name):
    """Get the environment variable or return exception.""" 
    try:
        return os.environ[var_name] 
    except KeyError:
        error_msg = "Set the {} environment variable".format(var_name)
        raise ImproperlyConfigured(erro.r_msg)
#+end_src

#+begin_src python
SOME_SECRET_KEY = get_env_variable("SOME_SECRET_KEY")
#+end_src
** 當環境限制無法使用environment variable時怎麼做呢
將secret_key放進json file(or xml, yml ...etc)，setting file中利用json util將secret_key讀出，注意此secret file不該進入version control
#+begin_src javascript
{
    "FILENAME": "secrets.json",
    "SECRET_KEY": "I've got a secret!",
    "DATABASES_HOST": "127.0.0.1",
    "PORT": "5432"
}
#+end_src

#+begin_src python
# settings/base.py
import json
# Normally you should not import ANYTHING from Django directly # into your settings, but ImproperlyConfigured is an exception. from django.core.exceptions import ImproperlyConfigured

# JSON-based secrets module

with open("secrets.json") as f:
    secrets = json.loads(f.read())
def get_secret(setting, secrets=secrets):
    """Get the secret variable or return explicit exception."""
    try:
        return secrets[setting] 
    except KeyError:
        error_msg = "Set the {0} environment variable".format(setting) 
        raise ImproperlyConfigured(error_msg)

SECRET_KEY = get_secret("SECRET_KEY")
#+end_src

** Requirements Files也要照環境分開
不同環境可能需要裝不同package(ex: local才需要debug工具)
在<repository root>/requirements
#+begin_src sh
requirements/
    base.txt
    local.txt
    staging.txt
    production.txt
#+end_src

in base.txt
#+begin_src python
Django==1.8.0
psycopg2==2.6
djangorestframework==3.1.1
#+end_src

in local.txt
#+begin_src python
-r base.txt # includes the base.txt requirements file

coverage==3.7.1
django-debug-toolbar==1.3.0
#+end_src

in production.txt
#+begin_src python
-r base.txt # includes the base.txt requirements file
#+end_src

裝package時用以下指令指定requirements檔案安裝
#+begin_src sh
$ pip install -r requirements/local.txt
$ pip install -r requirements/production.txt
#+end_src
** Setting Files中的Path不要使用Absolute Path
利用Unipath (http://pypi.python.org/pypi/Unipath/)
#+begin_src python
# At the top of settings/base.py 
from unipath import Path

BASE_DIR = Path(__file__).ancestor(3)
MEDIA_ROOT = BASE_DIR.child("media")
STATIC_ROOT = BASE_DIR.child("static")
STATICFILES_DIRS = (
    BASE_DIR.child("assets"),
)
TEMPLATES = [
    {
         'BACKEND': 'django.template.backends.django.DjangoTemplates',
         DIRS = (BASE_DIR.child("templates"),)
     },
]
#+end_src

或用python內建的os.path
#+begin_src python
# At the top of settings/base.py
from os.path import join, abspath, dirname
here = lambda *dirs: join(abspath(dirname(__file__)), *dirs) BASE_DIR = here("..", "..")
root = lambda *dirs: join(abspath(BASE_DIR), *dirs)

# Configuring MEDIA_ROOT
MEDIA_ROOT = root("media")

# Configuring STATIC_ROOT
STATIC_ROOT = root("collected_static")

# Additional locations of static files
STATICFILES_DIRS = (
    root("assets"),
)

# Configuring TEMPLATE_DIRS
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        DIRS = (root("templates"),)
    }, 
]
#+end_src
* Model
** Model Inheritance
當重複field太多時，可考慮abstract base inheritance，例如幾乎每個model都要有created, modified
+ Abstract base classes: 實際上DB不會有parent table
+ multi-table inheritance: DB確實會長出parent table and child table然後用foreign key連結
+ proxy models

*不要使用multi-table inheritance，由於其實是使用foreign key處理所以會有效能問題*

以下為例子
core.models.TimeStampedModel裡有常用的created and modified field
flavors.Flovor繼承TimeStampedModel的field
注意
    class Meta: 
        abstract = True
#+begin_src python
# core/models.py
from django.db import models
class TimeStampedModel(models.Model): 
    """
    An abstract base class model that provides self-
    updating ``created`` and ``modified`` fields.
    """
    created = models.DateTimeField(auto_now_add=True)
    modified = models.DateTimeField(auto_now=True)

    class Meta: 
        abstract = True
#+end_src
#+begin_src python
# flavors/models.py
from django.db import models
from core.models import TimeStampedModel

class Flavor(TimeStampedModel):
    title = models.CharField(max_length=200)
#+end_src
** Model Design Ordering
1. Start Normalized
2. Cache Before Denormalizing
3. Denormalize Only if Absolutely Needed(try cache, row SQL, indexes)
** When to Use Null and Blank
[[{% asset_img table6_2.png %}]]
** When to Use BinaryField
*Don't Serve Files From BinaryField. Use FileField!!!*
+ MessagePack-formatted content.
+ Raw sensor data.
+ Compressed data e.g. the type of data Sentry stores as a BLOB, but is required to base64-encode due to legacy issues.
** Try to Avoid Using Generic Relations
Cons:
+ Reduction in speed of queries due to lack of indexing between models.
+ Danger of data corruption as a table can refer to another against a non-existent record.
So:
+ Try to avoid generic relations and GenericForeignKey.
+ If you think you need generic relations, see if the problem can be solved through better model design or the new PostgreSQL  elds.
+ If usage can’t be avoided, try to use an existing third-party app.  e isolation a third-party app provides will help keep data cleaner.
** The Model meta API
Main Usages:
+ Get a list of a model’s fields.
+ Get the class of a particular  eld for a model (or its inheritance chain or other info derived from such).
+ Ensure that how you get this information remains constant across future Django versions.

Examples:
+ Building a Django model introspection tool.
+ Building your own custom specialized Django form library.
+ Creating admin-like tools to edit or interact with Django model data.
+ Writing visualization or analysis libraries, e.g. analyzing info only about  elds that start with “foo”.
** Fat Models
將跟DB有關的邏輯從view中抽出放到Model中包裝是好的設計，但project到最後會發生Model肥大的問題，一個Model數千行這就不好了，底下提供兩個解法
+ Model Behaviors Pattern: http://blog.kevinastone.com/django-model-behaviors.html
+ Mixin
* Queries and the Database Layer
** Use get object or 404() for Single Objects instead of get()
+ Only use it in views.
+ Don’t use it in helper functions, forms, model methods or anything that is not a view or directly view related.
** Be Careful With Queries That Might Throw Exceptions
*** ObjectDoesNotExist vs. DoesNotExist
ObjectDoesNotExist can be applied to any model object, whereas DoesNotExist is for a speci c model.
#+begin_src python
from django.core.exceptions import ObjectDoesNotExist 
from flavors.models import Flavor
from store.exceptions import OutOfStock

def list_flavor_line_item(sku): 
    try:
        return Flavor.objects.get(sku=sku, quantity__gt=0)
    except Flavor.DoesNotExist:
        msg = "We are out of {0}".format(sku) 
        raise OutOfStock(msg)
def list_any_line_item(model, sku): 
    try:
        return model.objects.get(sku=sku, quantity__gt=0) 
    except ObjectDoesNotExist:
        msg = "We are out of {0}".format(sku) 
        raise OutOfStock(msg)
#+end_src
*** When You Just Want One Object but Get Three Back
check for a MultipleObjectsRe- turned exception
#+begin_src python
from flavors.models import Flavor
from store.exceptions import OutOfStock, CorruptedDatabase

def list_flavor_line_item(sku): 
    try:
        return Flavor.objects.get(sku=sku, quantity__gt=0) .
    except Flavor.DoesNotExist:
        msg = "We are out of {}".format(sku) 
        raise OutOfStock(msg)
    except Flavor.MultipleObjectsReturned:
        msg = "Multiple items have SKU {}. Please fix!".format(sku) 
        raise CorruptedDatabase(msg)
#+end_src
** Transactions
*** Wrapping Each HTTP Request in a Transaction
#+begin_src python
# settings/base.py
DATABASES = {
'default': {
        # ...
        'ATOMIC_REQUESTS': True,
        },
}
#+end_src

non atomic function include atomic code:
#+begin_src python
# flavors/views.py
from django.db import transaction
from django.http import HttpResponse
from django.shortcuts import get_object_or_404 
from django.utils import timezone
from .models import Flavor

@transaction.non_atomic_requests
def posting_flavor_status(request, pk, status):
    flavor = get_object_or_404(Flavor, pk=pk)

    # This will execute in autocommit mode (Django's default).
    flavor.latest_status_change_attempt = timezone.now()
    flavor.save()

    with transaction.atomic():
    # This code executes inside a transaction. 
        flavor.status = status 
        flavor.latest_status_
        change_success = timezone.now() 
        flavor.save()
        return HttpResponse("Hooray")

    # If the transaction fails, return the appropriate status 
    return HttpResponse("Sadness", status_code=400)

#+end_src
*** Explicit Transaction Declaration
* Function- and Class-Based Views
** When to Use FBVs or CBVs
[[{% asset_img figure8_1.png %}]]
** Keep View Logic Out of URLConfs
Bad Example:
#+begin_src python
from django.conf.urls import url
from django.views.generic import DetailView
from tastings.models import Tasting

urlpatterns = [ 
    url(r"ˆ(?P<pk>\d+)/$",
        DetailView.as_view(
            model=Tasting,
            template_name="tastings/detail.html"),
        name="detail"),
    url(r"ˆ(?P<pk>\d+)/results/$", 
        DetailView.as_view(
            model=Tasting,
            template_name="tastings/results.html"),
        name="results"),
]

#+end_src

Good view example:
#+begin_src python
# tastings/views.py
from django.views.generic import ListView, DetailView, UpdateView 
from django.core.urlresolvers import reverse
from .models import Tasting 

class TasteListView(ListView):
    model = Tasting
class TasteDetailView(DetailView):
    model = Tasting
class TasteResultsView(TasteDetailView):
    template_name = "tastings/results.html"
class TasteUpdateView(UpdateView): 
    model = Tasting
    def get_success_url(self):
        return reverse("tastings:detail",
            kwargs={"pk": self.object.pk})
#+end_src

Good urls example:
#+begin_src python
# tastings/urls.py
from django.conf.urls import url
from . import views

urlpatterns = [
    url(
        regex=r"ˆ$", 
        view=views.TasteListView.as_view(), 
        name="list"
    ),
    url(
        regex=r"ˆ(?P<pk>\d+)/$", 
        view=views.TasteDetailView.as_view(), 
        name="detail"
    ), 
    url(
        regex=r"ˆ(?P<pk>\d+)/results/$", 
        view=views.TasteResultsView.as_.view(), 
        name="results"
    ), 
    url(
        regex=r"ˆ(?P<pk>\d+)/update/$", 
        view=views.TasteUpdateView.as_view(), 
        name="update"
    ) 
]
#+end_src
** Use URL Namespaces
In the root URLConf we would add:
#+begin_src python
# urls.py at root of project
urlpatterns += [
    url(r'ˆtastings/', include('tastings.urls', namespace='tastings')),
]
#+end_src

view example:
#+begin_src python
# tastings/views.py snippet
class TasteUpdateView(UpdateView):
    model = Tasting
    def get_success_url(self):
        return reverse("tastings:detail", .
            kwargs={"pk": self.object.pk})
#+end_src
** Django Views Are Functions
Class-Based Views Are Actually Called as Functions
#+begin_src python
# simplest_views.py
from django.http import HttpResponse 
from django.views.generic import View

# The simplest FBV
def simplest_view(request):
    # Business logic goes here 
    return HttpResponse("FBV")

# The simplest CBV
class SimplestView(View):
    def get(self, request, *args, **kwargs):
       # Business logic goes here
       return HttpResponse("CBV")
#+end_src
** Don't Use locals() as Views Context
Bad example:
#+begin_src python
def ice_cream_store_display(request, store_id): 
    store = get_object_or_404(Store, id=store_id)
    now = timezone.now()
    return render(request, 'melted_ice_cream_report.html', locals())
#+end_src

Good example:
#+begin_src python
def ice_cream_store_display(request, store_id):
    return render(request, 'melted_ice_cream_report.html', dict{
        'store': get_object_or_404(Store, id=store_id),
        'now': timezone.now()
    })
#+end_src
* Reference
此筆記大多來自這本書：
Two Scoops of Django: Best Practices for Django 1.8
by Daniel Roy Greenfeld (Author), Audrey Roy Greenfeld (Author)
https://www.twoscoopspress.com/
